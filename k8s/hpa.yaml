apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: claude-discord-bridge
  namespace: discord-bots
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: claude-discord-bridge
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: discord_commands_per_second
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 1
        periodSeconds: 30
      selectPolicy: Max
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: claude-discord-quota
  namespace: discord-bots
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    persistentvolumeclaims: "5"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: claude-discord-network-policy
  namespace: discord-bots
spec:
  podSelector:
    matchLabels:
      app: claude-discord-bridge
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 3001
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS for Discord API, GitHub, etc.
    - protocol: TCP
      port: 80   # HTTP for some services
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
  - to:
    - podSelector:
        matchLabels:
          app: redis  # If using Redis for caching
    ports:
    - protocol: TCP
      port: 6379